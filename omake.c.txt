#pragma once
printf("\x1b[A\x1b[2K");
for (int i = 1; i <= 10; i++)printf("\x1b[41m\x1b[%d@\x1b[%dC\x1b[42m \x1b[0m\n", i, i);
for (int i = 10; i >= 1; i--)printf("\x1b[41m\x1b[%d@\x1b[%dC\x1b[42m \x1b[0m\n", i, i);
const char* red = "\x1b[41m\x1b[1@\x1b[1C\x1b[0m";
const char* green = "\x1b[42m\x1b[1@\x1b[1C\x1b[0m";
const char* yellow = "\x1b[43m\x1b[1@\x1b[1C\x1b[0m";
printf("%s%s%s\n", red, green, yellow);

void MemoryGame(void) {
	srand((unsigned int)time(NULL));

	int currRank = 0;
	int currSuit = 0;
	int x = 0;
	int y = 0;
	int sucCount = 0;
	int gameTurn = 0;
	int numOfPlayers = 0;
	PlayerInfo* currPlayer;
	PlayerInfo** playerRank = NULL;

	PlayerInfo* member = NULL; //= MakePlayer();
	char suit[][6] = { "spade", "clab", "heart", "dia" };
	TrumpInfo trump[RANK_COUNT][SUIT_COUNT] = { 0,(SUIT)0 };
	for (int i = 0; i < RANK_COUNT; i++) {
		for (int j = 0; j < SUIT_COUNT; j++) {
			trump[i][j].cardRank = i;
			//trump[i][j].cardSuit = (SUIT)j;
			strcpy(trump[i][j].cardSuit, suit[j]);
			trump[i][j].isDeploy = false;
		}
	}

	numOfPlayers = MakePlayer(&member, true);
	playerRank = (PlayerInfo**)calloc(numOfPlayers, sizeof(PlayerInfo**));
	pck(playerRank);
	//memcpy(playerRank, &member, sizeof(PlayerInfo**));
	for (int i = 0; i < sizeof(PlayerInfo**); i++) {
		playerRank[i] = &member[i];
	}

	if (member != NULL) {
		TrumpInfo* field[RANK_COUNT][SUIT_COUNT] = { {0} };
		TrumpInfo* choiceTrump[2] = { 0 };

		for (x = 0; x < RANK_COUNT; x++) {
			for (y = 0; y < SUIT_COUNT; y++) {
				do {
					currRank = rand() % RANK_COUNT;
					currSuit = rand() % SUIT_COUNT;
				} while (trump[currRank][currSuit].isDeploy == true);
				field[x][y] = &trump[currRank][currSuit];
				field[x][y]->isDeploy = true;
				printf("(%2d, %2d) is %5s of %2d\n", x, y, field[x][y]->cardSuit, field[x][y]->cardRank);
			}
		}

		//mainloop
		while (RANK_COUNT * SUIT_COUNT / 2 > sucCount) {
			currPlayer = &member[gameTurn % numOfPlayers];
			ick(gameTurn);
			sck(currPlayer->name);
			for (int i = 0; i < 2;) {
				scanf("%d", &x);
				scanf("%d", &y);
				if (field[x][y]->isDeploy == true) {
					choiceTrump[i] = field[x][y];
					choiceTrump[i]->isDeploy = false;
					printf("(%2d, %2d) is %5s of %2d\n", x, y, choiceTrump[i]->cardSuit, choiceTrump[i]->cardRank);
					i++;
				}
				else {
					printf("再入力\n");
				}
			}

			if (choiceTrump[0]->cardRank == choiceTrump[1]->cardRank) {
				for (int i = 0; i < 2; i++) {
					choiceTrump[i]->isDeploy = false;
					currPlayer->haveTrump[currPlayer->numOfhaveTrump] = choiceTrump[i];
					currPlayer->numOfhaveTrump++;
					ick(currPlayer->numOfhaveTrump);
				}
				sucCount++;
			}
			else {
				printf("残念!\n");
				choiceTrump[0]->isDeploy = choiceTrump[1]->isDeploy = true;
				gameTurn++;

			}
		}
		for (int i = 0; i < numOfPlayers - 1; i++) {
			for (int j = i + 1; j < numOfPlayers; j++) {
				if (playerRank[i]->numOfhaveTrump < playerRank[j]->numOfhaveTrump) {
					PlayerInfo* tmp = playerRank[i];
					playerRank[i] = playerRank[j];
					playerRank[j] = tmp;
				}
			}
		}
		/*for (int i = 0; i < numOfPlayers; i++) {
			sck(playerRank[i]->name);
		}*/
		RankOfGame();
		ick(__LINE__);
		free(member);
		ick(__LINE__);
		//free(playerRank);
		ick(__LINE__);
	}
}

//ick((*(*memberPtr + i)).id); //OK
//ick(( (*memberPtr) + i)->id); //OK  member[i]のアドレス＋アロー
//ick((*memberPtr)[i].id);     //OK   実体member[i]+ドット
//ick((&((*memberPtr)[i]))->id);
//ick(((memberPtr[0]) + i)->id);
//ick((memberPtr[0])[i].id);
//ick(memberPtr[0][i].id);
//member == *memberPtr
// memberPtr == &member
//member[i].id
//(*(member + i)).id
//(*((*memberPtr) + i)).id
//(*(( memberPtr) + i))->id
// a[i][j] == *(a[i] + j)
//*(a[i] + j) == *(*(a + i) + j)

//演算子の優先順位は　'[]' = '.' = '->' > '*'
// ick(memberPtr[i]->id)     NG (優先度共に1のため左から評価される)
//ick((*memberPtr[i]).id);   NG ( '*' < '[]' だから)
//ick((*(memberPtr[i])).id); NG

//*memberPtr == member
//member[i] == (*member)[i]
//member[i].name == ((*member)[i]).name
//a[i] == *(a + i)
//(*member)[i].name == (*(*member + i)).name
//(*a).mem == a->mem * は内側
// *(a + i) == a[i]      * は外側
//(*(*member + i)).name == (*(member + i))->name

	/*trump[0][4].card_type = joker;
	trump[1][4].card_type = joker;*/

int MakeMember(PlayerInfo** memberPtr, bool isMultPlayer) {
    int cpuCount = 0;
    int playerCount = 0;
    if (isMultPlayer) {
        printf("プレイヤーの数を入力：");
        scanf("%d", &playerCount);
    }
    else {
        playerCount = 1;
    }
    printf("comの人数を入力：");
    scanf("%d", &cpuCount);

    *memberPtr = (PlayerInfo*)calloc(sizeof(PlayerInfo), playerCount + cpuCount);
    if (*memberPtr != NULL) { //メンバーが正しく作成されたか
        for (int i = 0; i < playerCount; i++) {
            printf("プレイヤー%dの名前を入力：", i+1);

            scanf("%s", (*memberPtr)[i].name);
            //sprintf((*memberPtr)[i].name, "\x1b[31mPLAYER%d\x1b[0m", i + 1);
            (*memberPtr)[i].id = i; //プレイヤーIDの設定
        }
        for (int i = playerCount; i < playerCount + cpuCount; i++) {
            sprintf((*memberPtr)[i].name, "COM%d", i - playerCount + 1);
            (*memberPtr)[i].id = 100 + i;   //COMのIDの設定

        }
    }
    return playerCount + cpuCount;
}
